/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-02-25 00:44:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>* EL(Expression language)</h1>\r\n");
      out.write("\r\n");
      out.write("    <p>\r\n");
      out.write("        기존에 사용하던 표현식 &lt;=name&gt;와 같이 <br>\r\n");
      out.write("        JSP상에서 표현하고자하는 값을 ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("의 형식으로 표현해서 작성하는 것\r\n");
      out.write("    </p>\r\n");
      out.write("\r\n");
      out.write("    <h4><a href=\"el.do\">01_EL의 기본구문</a></h4>\r\n");
      out.write("	<h4><a href=\"operation.do\">02_EL의 연산자</a></h4>\r\n");
      out.write("\r\n");
      out.write("    <h1>JSP Action Tag</h1>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <h3>*표준액션태그</h3>\r\n");
      out.write("    <a href=\"views/2_standard_action_tag/01_include.jsp\">01_jsp:include</a>\r\n");
      out.write("    <a href=\"views/2_standard_action_tag/02_forward.jsp\">01_jsp:forward</a>\r\n");
      out.write("\r\n");
      out.write("    <h1>JSTL이란?</h1>\r\n");
      out.write("    <p>\r\n");
      out.write("        jsp에서 자주사용하는 기능들을 태그형태로 제공하는 표준 라이브러리(커스텀액션태그) <br>\r\n");
      out.write("        자바코드를 직접사용하지 않고도 반복문, 조건문, 포멧처리... 쉽게 수행할 수 있음 <br>\r\n");
      out.write("        태그로 작성이 되어있기 때문에 코드가독성이 높아짐.\r\n");
      out.write("    </p>\r\n");
      out.write("    \r\n");
      out.write("    <h3>jstl라이브러리 추가</h3>\r\n");
      out.write("    1) maven repository 사이트 접속 <br>\r\n");
      out.write("    2) Jakarta Standard Tag Library Implementation와 Jakarta Standard Tag Library API 다운로드 <br>\r\n");
      out.write("    3) 2개 파일의 .jar파일을 WEB-INF/lib폴더에 추가\r\n");
      out.write("\r\n");
      out.write("    <h3>JSTL 선언방법</h3>\r\n");
      out.write("    <p>\r\n");
      out.write("        JSTL을 사용하고자하는 해당JSP페이지 상단에 <br>\r\n");
      out.write("        taglib 지시어를 사용해서 선언함 <br><br>\r\n");
      out.write("\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("    </p>\r\n");
      out.write("\r\n");
      out.write("    <h3>Custom Action Tag</h3>\r\n");
      out.write("    <h4>1. JSTL Core Library</h4>\r\n");
      out.write("    <p>변수와 조건문, 반복문과 같은 로직과 관련된 문법을 제공</p>\r\n");
      out.write("    <a href=\"views/3_custom-action-tag/01_core.jsp\">01_core</a>\r\n");
      out.write("\r\n");
      out.write("    <h4>2. JSTL Formatting Library</h4>\r\n");
      out.write("    <p>숫자, 날짜및 시간 데이터의 출력형식을 지정할 때 사용</p>\r\n");
      out.write("    <a href=\"views/3_custom-action-tag/02_fmt.jsp\">02_fmt</a>\r\n");
      out.write("\r\n");
      out.write("    <h4>3. JSTL function Library</h4>\r\n");
      out.write("    <p>EL안에서 사용할 수 있는 메서드를 제공</p>\r\n");
      out.write("    <a href=\"views/3_custom-action-tag/03_function.jsp\">03_function</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
